#!/usr/bin/env node
'use strict'

const fs = require('fs')
const path = require('path')
const program = require('commander')
const getOptions = require('./options')
const packageInfo = require('../package.json')
const cwd = process.cwd()

// Prefer the local installation of T-man
const tman = localTman(path.join(cwd, 'node_modules', 'tman')) || localTman(cwd) || require('..')
if (packageInfo.version !== tman.VERSION) {
  console.warn(tman.format.red('\nWarning: T-man version mismatch:', true))
  console.warn(tman.format.red(
    '  Global: v' + packageInfo.version + ', update: npm i -g tman', true))
  console.warn(tman.format.red(
    '  Local: v' + tman.VERSION + ', update: npm i tman@latest\n', true))
}

// options
program._name = tman.NAME
program
  .version('v' + tman.VERSION)
  .usage('[debug] [options] [files]')
  .option('-c, --colors', 'force enabling of colors')
  .option('-C, --no-colors', 'force disabling of colors')
  .option('-d, --debug', "enable node's debugger, synonym for node --debug")
  .option('-e, --exclude <pattern>', 'exclude tests matching <pattern>')
  .option('-g, --grep <pattern>', 'run tests matching <pattern>')
  .option('-gc, --expose-gc', 'expose gc extension')
  .option('-r, --require <name>', 'require the given module')
  .option('-R, --reporter <name>', 'specify the reporter to use [spec]')
  .option('-t, --timeout <ms>', 'set test-case timeout in milliseconds [2000]')
  .option('--debug-brk', "enable node's debugger breaking on the first line")
  .option('--inspect', "enable node's debugger breaking on the first line")
  .option('--inspect-brk', "enable node's debugger breaking on the first line")
  .option('--es_staging', 'enable all staged features')
  .option('--globals <names>', 'allow the given comma-delimited global [names]')
  .option('--harmony<_classes,_generators,...>', 'all node --harmony* flags are available')
  .option('--icu-data-dir', 'include ICU data')
  .option('--mocha', 'mocha compatible mode')
  .option('--no-sort', 'don\'t sort test files')
  .option('--no-timeout', 'disables timeouts, given implicitly with --debug')
  .option('--no-exit',
    'require a clean shutdown of the event loop: T-man will not call process.exit')
  .option('--opts <path>', 'specify opts path', 'test/tman.opts')
  .option('--perf-basic-prof', 'enable perf linux profiler (basic support)')
  .option('--preserve-symlinks', 'Instructs the module loader to preserve symbolic links when resolving and caching modules')
  .option('--reporters', 'display available reporters')
  .option('--throw-deprecation', 'throw an exception anytime a deprecated function is used')
  .option('--trace', 'trace function calls')
  .option('--trace-deprecation', 'show stack traces on deprecations')
  .option('--use_strict', 'enforce strict mode')

module.paths.push(cwd, path.join(cwd, 'node_modules'))
// -r, --require
const requires = []
program.on('option:require', (name) => {
  let stat = fsStat(name + '.js') || fsStat(name)
  if (stat) name = path.resolve(name)
  requires.push(name)
})
// --globals <names>
const globals = []
program.on('option:globals', (val) => {
  globals.push.apply(globals, parseList(val))
})
program.on('option:reporters', () => {
  console.log()
  console.log('    dot - dot matrix')
  console.log('    spec - hierarchical spec list')
  console.log('    base - spec-style listing with TAB')
  console.log()
  process.exit()
})

// If not already done, load mocha.opts
if (!process.env.LOADED_TMAN_OPTS) getOptions()
// parse args
program.parse(process.argv)

// --no-colors | --colors
if (~process.argv.indexOf('--no-colors') || ~process.argv.indexOf('-C')) tman.useColors(false)
else if (~process.argv.indexOf('--colors') || ~process.argv.indexOf('-c')) tman.useColors(true)
// --exclude <pattern>
if (program.exclude) tman.exclude(program.exclude)
// --grep <pattern>
if (program.grep) tman.grep(program.grep)
// --mocha
if (program.mocha) tman.mocha()
// --no-exit
tman.setExit(program.exit)
// --timeout
const timeout = program.timeout === false ? -1 : parseInt(program.timeout, 10)
if (timeout) tman.timeout(timeout)

// reporter
if (program.reporter) tman.loadReporter(program.reporter)

// requires
requires.forEach((mod) => require(mod))

// register to global object
const defaultGlobals = ['tman', 'describe', 'suite', 'test', 'it', 'before', 'after', 'beforeEach', 'afterEach']
tman.globals(globals.length ? globals : defaultGlobals)

if (!tman.env.TEST) tman.env.TEST = 'root'
if (!process.env.npm_execpath) {
  // can't exit when runing with npm. https://github.com/npm/npm/issues/4603
  process.once('SIGINT', () => {
    tman.abort()
    // force to exit in 3 seconds.
    setTimeout(() => tman.exit(1), 3000)
  })
}

// // load test files.
const files = program.args
// default files to `test/*.{js,ts,es,coffee}`
if (!files.length) files.push(path.join('test', '*.{js,ts,es,coffee}'))
tman.loadFiles(files, program.sort !== false)
tman.tryRun()

function localTman (dirname) {
  let tmanId = path.sep + path.join('lib', 'tman.js')
  let file = path.join(dirname, 'lib', 'tman.js')
  if (file.slice(tmanId.length * -1) !== tmanId) return null
  if (fsStat(file) !== 1 || fsStat(path.join(dirname, 'bin', 'tman')) !== 1) return null
  return require(file)
}

// 0: unknown, 1: file, 2: directory
function fsStat (filePath) {
  try {
    let stat = fs.statSync(filePath)
    if (stat.isFile()) return 1
    else if (stat.isDirectory()) return 2
    else return 0
  } catch (e) {}
  return 0
}

// Parse list.
function parseList (str) {
  return str.replace(/\W/g, ' ').trim().split(/ +/)
}
